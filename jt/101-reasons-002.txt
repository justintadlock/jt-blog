We've established that <a href="http://justintadlock.com/archives/2013/08/24/millions-of-users" title="Millions of users">loads of people</a> use the Hybrid Core framework, but that's not necessarily a good reason for you to use it too, right?  I mean, tons of people watched <em>Jersey Shore</em>, so pure numbers don't always add up to a good thing.

Therefore, let me appeal to your developer/designer side a bit.

<h2>How most theme "frameworks" work</h2>

There's always been a bit of discussion about what actually constitutes a theme framework in the WordPress community.  Let me go ahead and clarify what most people call a theme framework.

<ul>
<li>It's a parent theme.</li>
<li>The parent theme creates the markup.</li>
<li>The parent theme houses the functionality.</li>
<li>It has lots of hooks, which can often create a steeper learning curve.</li>
<li>Child themes are then created to behave, usually, as an entire them unto themselves.</li>
</ul>

It's no secret that I <a href="http://justintadlock.com/archives/2010/08/16/frameworks-parent-child-and-grandchild-themes" title="Frameworks? Parent, child, and grandchild themes?">disagree with that definition</a> of theme framework.  Don't get me wrong; I love the ideas there and use them myself.  I just disagree that those things should be considered a framework.  Essentially, you could then call just about any theme a framework.

<h2>How Hybrid Core is different</h2>

First of all, it's not a theme at all.  It's a library that you use within your theme.

I created Hybrid Core because I needed a way to take bits of theme-specific functionality and apply them to many different themes without having to re-code those things every time.  

Basically, I created a framework that mostly consists of standalone scripts that you can pick and choose to use, all of which aid in the process of theme development.  This ranges from things like breadcrumbs to numbered pagination.  Or, things like a powerful thumbnail script and a custom colors feature for the theme customizer.

Before releasing Hybrid Core, I had a popular [parent] theme like the "theme frameworks" mentioned above.  However, it became very clear to me that no matter how many hooks there were or ways to override things, it just couldn't handle any project you threw at it.  For that, theme developers really needed complete control over their own theme.  And, this control should actually be real <abbr title="Hypertext Markup Language">HTML</abbr>, not spaghetti code all mixed into a <code>functions.php</code> file.

Not to mention, most users just don't understand using hooks without education.  Many of them already have a working knowledge, even if limited, of <abbr title="Hypertext Markup Language">HTML</abbr> and <abbr title="Cascading Style Sheets">CSS</abbr>.

I needed to cater to both a development crowd and <abbr title="Do It Yourself">DIY</abbr> users.

That's where Hybrid Core came in.  It's a framework that you <em>drop in</em>to your theme.  Any theme designer could instantly use a set of pretty nifty tools and apply them to any markup structure they wanted.  This allowed for a few things:

<ul>
<li>Theme template files could actually look like <abbr title="Hypertext Markup Language">HTML</abbr> with WordPress template tags mixed in.</li>
<li>Users of those themes don't necessarily have to override template-related things via <code>functions.php</code> anymore, which has been an outdated process since WordPress beefed up child theming with template overriding.</li>
<li>The learning curve is decided by you.  You can create a theme and only use the parts of Hybrid Core you're comfortable using.</li>
</ul>

As a theme designer, Hybrid Core hands the control back to you while still giving you the power of the framework's features.  It also allows you to create a theme that shouldn't confuse your <abbr title="Do It Yourself">DIY</abbr> users.

<h2>I just want to write <abbr title="Cascading Style Sheets">CSS</abbr></h2>

Okay, so not everyone wants to create full-blown themes.  They just like fiddling with <abbr title="Cascading Style Sheets">CSS</abbr> to make pretty designs.  That's perfectly fine.  A lot of my users like to do that too.

If you can remember that far back, I helped pioneer child themes back when WordPress only allowed a child theme to be a <code>style.css</code> file (ahh, the good ol' days).  If that's really your thing, here's three perfectly good Hybrid Core built themes to start with for that:

<ul>
<li><a href="http://themehybrid.com/themes/hybrid" title="Hybrid WordPress theme">Hybrid</a></li>
<li><a href="http://themehybrid.com/themes/prototype" title="Prototype WordPress theme">Prototype</a></li>
<li><a href="http://themehybrid.com/themes/shell" title="Shell WordPress theme">Shell</a></li>
</ul>

Wait.  What if you want to get your feet wet with something more advanced than child themes?  We've got you covered there too.  Here's two awesome themes that will guide you into making your own custom parent themes:

<ul>
<li><a href="http://themehybrid.com/themes/hybrid-base" title="Hybrid Base WordPress theme">Hybrid Base</a></li>
<li><a href="http://themehybrid.com/themes/seamless" title="Seamless WordPress theme">Seamless</a></li>
</ul>

<h2>A little something for everyone</h2>

The Hybrid Core framework was meant to get the hell out of the way.  It's markup agnostic.  It's design agnostic.  And, best of all, your users never have to know they're using a framework.  You're just providing them with a theme that looks and feels like a theme.

Of course, you could make it as complex as you want it to be.  But, that doesn't sound like fun.

I've just given you basic <abbr title="Hypertext Markup Language">HTML</abbr> back.  How does that sound as a selling point for a theme framework?
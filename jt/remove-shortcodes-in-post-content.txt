I'm no fan of WordPress themes adding shortcodes.  I've been pretty <a href="http://justintadlock.com/archives/2011/05/02/dealing-with-shortcode-madness" title="Dealing with shortcode madness">adamant about it</a> in the past.  But, all rules have exceptions, right?

<em>So, you're telling me that you &mdash; the guy who's been drilling it into my head to not add theme shortcodes &mdash; that it might now be okay?</em>

Well, yes.  Technically, I've always been okay with themes adding shortcodes as long as those shortcodes are not <strong>intended to be used in the post content</strong>.

Shortcodes can be used for any number of purposes.  Generally speaking, developers create shortcodes to be used in the post content.  For this reason alone, shortcodes belong in a plugin.  However, if you're creating a shortcode to be used in other places where data portability is not an issue, go wild.

Here's a few examples of what I consider exceptions to the rule:

<ul>
	<li>Shortcodes for use in theme templates.</li>
	<li>Shortcodes for use in theme settings, such as the footer text.</li>
	<li>Shortcodes for use in widgets (this is probably a bit of a gray area to some).</li>
</ul>

The problem is that users can still use these shortcodes in the post content even if wasn't your <em>intention</em> to allow them to do so.  This discussion came up in the <a href="http://make.wordpress.org/themes/2012/11/26/wordpress-3-5-guidelines-revisions/" title="WordPress 3.5 Guidelines Revisions">comments</a> on the proposed WordPress 3.5 theme guideline revisions.  This tutorial will show you how to avoid that scenario.

<h2>Adding shortcodes</h2>

I'm going to assume you're already familiar with the process of adding shortcodes using WordPress' <a href="http://codex.wordpress.org/Function_Reference/add_shortcode" title="WordPress Codex: add_shortcode()">add_shortcode()</a> function, so I won't cover that.

The following is an example of a few theme-defined shortcodes and how they should be set up.

<pre><code>add_action( 'init', 'my_add_shortcodes' );

function my_add_shortcodes() {

	add_shortcode( 'shortcode_1', 'my_shortcode_1' );
	add_shortcode( 'shortcode_2', 'my_shortcode_2' );
	add_shortcode( 'shortcode_3', 'my_shortcode_3' );
}</code></pre>

This is just to give you a base to work with for the remainder of this tutorial.  You can set up your own shortcodes however you like.

<h2>Removing shortcodes in the post content</h2>

We don't want our shortcodes to be used at all in the post content.  The best option here is to simply remove them when the <code>the_content</code> filter hook is called.  WordPress makes this extremely easy with the <a href="http://codex.wordpress.org/Function_Reference/remove_shortcode" title="WordPress Codex: remove_shortcode()">remove_shortcode()</a> function.

The following code will remove the three shortcodes we added earlier.

<pre><code>add_filter( 'the_content', 'my_post_content_remove_shortcodes', 0 );

function my_post_content_remove_shortcodes( $content ) {

	/* Create an array of all the shortcode tags. */
	$shortcode_tags = array(
		'shortcode_1',
		'shortcode_2',
		'shortcode_3'
	);

	/* Loop through the shortcodes and remove them. */
	foreach ( $shortcode_tags as $shortcode_tag )
		remove_shortcode( $shortcode_tag );

	/* Return the post content. */
	return $content;
}</code></pre>

<em>Wait!  Won't that permanently remove the shortcodes?</em>  Yes, it will.  Therefore, you must add them back so they can be used outside of <code>the_content</code>.  The following code does just that.

<pre><code>add_filter( 'the_content', 'my_post_content_add_shortcodes', 99 );

function my_post_content_add_shortcodes( $content ) {

	/* Add the original shortcodes back. */
	my_add_shortcodes();

	/* Return the post content. */
	return $content;
}</code></pre>

<h2>Thoughts?  Other solutions?</h2>

I agree that this seems like a bit of a hack, but it's the best option I've found thus far and doesn't take much code.  I'm open to suggestions on better methods.

The great news is that you don't have to worry about your users messing up their content by using shortcodes that you didn't intend for use in the post content.  They'll know upon any attempts to do so that it simply won't work.